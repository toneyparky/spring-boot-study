buildscript { // 이 프로젝트의 플러그인 의존성을 관리하는 것.
    ext { // build.gradle에서 사용하는 전역변수를 설정하겠다.
        springBootVersion = '2.1.9.RELEASE' // spring-boot-gradle-plugin이라는 플러그인의 저 버전을 의존성으로 받겠다.
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

// 이 넷은 필수 플러그인이라 꼭 추가하자
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management' // 스프링 부트의 의존성을 관리해주는 플러그인

group 'org.example'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories { // 각종 의존성을 어떤 원격 저장소에서 받을지 정한다.
    mavenCentral()
    jcenter()
}

dependencies { // 프로젝트 개발에 필요한 의존성들을 선언하는 곳. 아래 둘을 다운 받도록 되어있다.
    compile('org.springframework.boot:spring-boot-starter-web') // 버전을 명시 안해야 맨 위에서 추가한 버전을 따라간다.
    compile('org.projectlombok:lombok')
    compile('org.springframework.boot:spring-boot-starter-data-jpa') // 스프링 부트용 Spring Data Jpa 추상화 라이브러리, 부트 버전에 맞춰 자동으로 JPA관련 라이브러리들의 버전을 관리
    compile('com.h2database:h2') // 인메모리 관계형 데이터베이, 별도의 설치 없이 프로젝트 의존성만으로 관리가능, 앱 재시작시 초기화되기에 테스트 용으로 사용, 여기선 JPA 테스트/로컬에서의 구동에 사용.
    compile('org.springframework.boot:spring-boot-starter-mustache') // 머스테치 추가!
    testCompile('org.springframework.boot:spring-boot-starter-test')
}
